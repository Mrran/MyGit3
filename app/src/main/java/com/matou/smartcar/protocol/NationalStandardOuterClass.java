package com.matou.smartcar.protocol;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NationalStandard.proto

public final class NationalStandardOuterClass {
  private NationalStandardOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface NationalStandardOrBuilder extends
      // @@protoc_insertion_point(interface_extends:NationalStandard)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * 消息编号,对应国标下的多种场景进行编号
     * </pre>
     *
     * <code>.NationalStandard.MsgType msgType = 1;</code>
     */
    int getMsgTypeValue();
    /**
     * <pre>
     * 消息编号,对应国标下的多种场景进行编号
     * </pre>
     *
     * <code>.NationalStandard.MsgType msgType = 1;</code>
     */
    NationalStandardOuterClass.NationalStandard.MsgType getMsgType();

    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    boolean hasGuidepost();
    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    GuidepostOuterClass.Guidepost getGuidepost();
    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    GuidepostOuterClass.GuidepostOrBuilder getGuidepostOrBuilder();

    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    boolean hasGreenWaveGuide();
    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    GreenWaveGuideOuterClass.GreenWaveGuideList getGreenWaveGuide();
    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder getGreenWaveGuideOrBuilder();

    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    boolean hasMetadatas();
    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    MetadataOuterClass.MetadataList getMetadatas();
    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    MetadataOuterClass.MetadataListOrBuilder getMetadatasOrBuilder();

    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    java.util.List<ExtraOuterClass.Extra>
        getExtraList();
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    ExtraOuterClass.Extra getExtra(int index);
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    int getExtraCount();
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    java.util.List<? extends ExtraOuterClass.ExtraOrBuilder>
        getExtraOrBuilderList();
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    ExtraOuterClass.ExtraOrBuilder getExtraOrBuilder(
            int index);

    public NationalStandardOuterClass.NationalStandard.MessageCase getMessageCase();
  }
  /**
   * Protobuf type {@code NationalStandard}
   */
  public  static final class NationalStandard extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:NationalStandard)
      NationalStandardOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NationalStandard.newBuilder() to construct.
    private NationalStandard(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NationalStandard() {
      msgType_ = 0;
      extra_ = java.util.Collections.emptyList();
    }

    @Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NationalStandard(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              msgType_ = rawValue;
              break;
            }
            case 18: {
              GuidepostOuterClass.Guidepost.Builder subBuilder = null;
              if (messageCase_ == 2) {
                subBuilder = ((GuidepostOuterClass.Guidepost) message_).toBuilder();
              }
              message_ =
                  input.readMessage(GuidepostOuterClass.Guidepost.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((GuidepostOuterClass.Guidepost) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 2;
              break;
            }
            case 26: {
              GreenWaveGuideOuterClass.GreenWaveGuideList.Builder subBuilder = null;
              if (messageCase_ == 3) {
                subBuilder = ((GreenWaveGuideOuterClass.GreenWaveGuideList) message_).toBuilder();
              }
              message_ =
                  input.readMessage(GreenWaveGuideOuterClass.GreenWaveGuideList.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((GreenWaveGuideOuterClass.GreenWaveGuideList) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 3;
              break;
            }
            case 34: {
              MetadataOuterClass.MetadataList.Builder subBuilder = null;
              if (messageCase_ == 4) {
                subBuilder = ((MetadataOuterClass.MetadataList) message_).toBuilder();
              }
              message_ =
                  input.readMessage(MetadataOuterClass.MetadataList.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((MetadataOuterClass.MetadataList) message_);
                message_ = subBuilder.buildPartial();
              }
              messageCase_ = 4;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                extra_ = new java.util.ArrayList<ExtraOuterClass.Extra>();
                mutable_bitField0_ |= 0x00000010;
              }
              extra_.add(
                  input.readMessage(ExtraOuterClass.Extra.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
          extra_ = java.util.Collections.unmodifiableList(extra_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return NationalStandardOuterClass.internal_static_NationalStandard_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return NationalStandardOuterClass.internal_static_NationalStandard_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              NationalStandardOuterClass.NationalStandard.class, NationalStandardOuterClass.NationalStandard.Builder.class);
    }

    /**
     * Protobuf enum {@code NationalStandard.MsgType}
     */
    public enum MsgType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       *路牌消息,比如限速,施工,危险路段
       * </pre>
       *
       * <code>GUIDEPOST = 0;</code>
       */
      GUIDEPOST(0),
      /**
       * <pre>
       * 绿波引导
       * </pre>
       *
       * <code>GREEN_WAVE_GUIDE = 1;</code>
       */
      GREEN_WAVE_GUIDE(1),
      /**
       * <pre>
       *紧急车辆提醒
       * </pre>
       *
       * <code>EMERGENCY_VEHICLE_REMINDER = 2;</code>
       */
      EMERGENCY_VEHICLE_REMINDER(2),
      /**
       * <pre>
       *变道预警
       * </pre>
       *
       * <code>LANE_CHANGE_WARNING = 3;</code>
       */
      LANE_CHANGE_WARNING(3),
      /**
       * <pre>
       *前向碰撞预警
       * </pre>
       *
       * <code>FORWARD_COLLISION_WARNING = 4;</code>
       */
      FORWARD_COLLISION_WARNING(4),
      /**
       * <pre>
       *交叉路口预警
       * </pre>
       *
       * <code>INTERSECTION_WARNING = 5;</code>
       */
      INTERSECTION_WARNING(5),
      /**
       * <pre>
       *左转辅助
       * </pre>
       *
       * <code>TURN_LEFT_AUXILIARY = 6;</code>
       */
      TURN_LEFT_AUXILIARY(6),
      /**
       * <pre>
       *盲区
       * </pre>
       *
       * <code>BLIND_SPOT = 7;</code>
       */
      BLIND_SPOT(7),
      /**
       * <pre>
       *逆向超车预警
       * </pre>
       *
       * <code>REVERSE_OVERTAKING_WARNING = 8;</code>
       */
      REVERSE_OVERTAKING_WARNING(8),
      /**
       * <pre>
       *紧急制动预警
       * </pre>
       *
       * <code>EMERGENCY_BRAKE_WARNING = 9;</code>
       */
      EMERGENCY_BRAKE_WARNING(9),
      /**
       * <pre>
       *异常车辆提醒
       * </pre>
       *
       * <code>ABNORMAL_VEHICLE_WARNING = 10;</code>
       */
      ABNORMAL_VEHICLE_WARNING(10),
      /**
       * <pre>
       *车辆失控提醒
       * </pre>
       *
       * <code>VEHICLE_LOSS_WARNING = 11;</code>
       */
      VEHICLE_LOSS_WARNING(11),
      /**
       * <pre>
       *闯红灯预警
       * </pre>
       *
       * <code>RED_LIGHT_WARNING = 12;</code>
       */
      RED_LIGHT_WARNING(12),
      /**
       * <pre>
       *弱势交通参与者碰撞预警
       * </pre>
       *
       * <code>VULNERABLE_TRAFFIC_PARTICIPANT_COLLISION_WARNING = 13;</code>
       */
      VULNERABLE_TRAFFIC_PARTICIPANT_COLLISION_WARNING(13),
      /**
       * <pre>
       *前方拥堵提醒
       * </pre>
       *
       * <code>CONGESTION_WARNING_AHEAD = 14;</code>
       */
      CONGESTION_WARNING_AHEAD(14),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       *路牌消息,比如限速,施工,危险路段
       * </pre>
       *
       * <code>GUIDEPOST = 0;</code>
       */
      public static final int GUIDEPOST_VALUE = 0;
      /**
       * <pre>
       * 绿波引导
       * </pre>
       *
       * <code>GREEN_WAVE_GUIDE = 1;</code>
       */
      public static final int GREEN_WAVE_GUIDE_VALUE = 1;
      /**
       * <pre>
       *紧急车辆提醒
       * </pre>
       *
       * <code>EMERGENCY_VEHICLE_REMINDER = 2;</code>
       */
      public static final int EMERGENCY_VEHICLE_REMINDER_VALUE = 2;
      /**
       * <pre>
       *变道预警
       * </pre>
       *
       * <code>LANE_CHANGE_WARNING = 3;</code>
       */
      public static final int LANE_CHANGE_WARNING_VALUE = 3;
      /**
       * <pre>
       *前向碰撞预警
       * </pre>
       *
       * <code>FORWARD_COLLISION_WARNING = 4;</code>
       */
      public static final int FORWARD_COLLISION_WARNING_VALUE = 4;
      /**
       * <pre>
       *交叉路口预警
       * </pre>
       *
       * <code>INTERSECTION_WARNING = 5;</code>
       */
      public static final int INTERSECTION_WARNING_VALUE = 5;
      /**
       * <pre>
       *左转辅助
       * </pre>
       *
       * <code>TURN_LEFT_AUXILIARY = 6;</code>
       */
      public static final int TURN_LEFT_AUXILIARY_VALUE = 6;
      /**
       * <pre>
       *盲区
       * </pre>
       *
       * <code>BLIND_SPOT = 7;</code>
       */
      public static final int BLIND_SPOT_VALUE = 7;
      /**
       * <pre>
       *逆向超车预警
       * </pre>
       *
       * <code>REVERSE_OVERTAKING_WARNING = 8;</code>
       */
      public static final int REVERSE_OVERTAKING_WARNING_VALUE = 8;
      /**
       * <pre>
       *紧急制动预警
       * </pre>
       *
       * <code>EMERGENCY_BRAKE_WARNING = 9;</code>
       */
      public static final int EMERGENCY_BRAKE_WARNING_VALUE = 9;
      /**
       * <pre>
       *异常车辆提醒
       * </pre>
       *
       * <code>ABNORMAL_VEHICLE_WARNING = 10;</code>
       */
      public static final int ABNORMAL_VEHICLE_WARNING_VALUE = 10;
      /**
       * <pre>
       *车辆失控提醒
       * </pre>
       *
       * <code>VEHICLE_LOSS_WARNING = 11;</code>
       */
      public static final int VEHICLE_LOSS_WARNING_VALUE = 11;
      /**
       * <pre>
       *闯红灯预警
       * </pre>
       *
       * <code>RED_LIGHT_WARNING = 12;</code>
       */
      public static final int RED_LIGHT_WARNING_VALUE = 12;
      /**
       * <pre>
       *弱势交通参与者碰撞预警
       * </pre>
       *
       * <code>VULNERABLE_TRAFFIC_PARTICIPANT_COLLISION_WARNING = 13;</code>
       */
      public static final int VULNERABLE_TRAFFIC_PARTICIPANT_COLLISION_WARNING_VALUE = 13;
      /**
       * <pre>
       *前方拥堵提醒
       * </pre>
       *
       * <code>CONGESTION_WARNING_AHEAD = 14;</code>
       */
      public static final int CONGESTION_WARNING_AHEAD_VALUE = 14;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static MsgType valueOf(int value) {
        return forNumber(value);
      }

      public static MsgType forNumber(int value) {
        switch (value) {
          case 0: return GUIDEPOST;
          case 1: return GREEN_WAVE_GUIDE;
          case 2: return EMERGENCY_VEHICLE_REMINDER;
          case 3: return LANE_CHANGE_WARNING;
          case 4: return FORWARD_COLLISION_WARNING;
          case 5: return INTERSECTION_WARNING;
          case 6: return TURN_LEFT_AUXILIARY;
          case 7: return BLIND_SPOT;
          case 8: return REVERSE_OVERTAKING_WARNING;
          case 9: return EMERGENCY_BRAKE_WARNING;
          case 10: return ABNORMAL_VEHICLE_WARNING;
          case 11: return VEHICLE_LOSS_WARNING;
          case 12: return RED_LIGHT_WARNING;
          case 13: return VULNERABLE_TRAFFIC_PARTICIPANT_COLLISION_WARNING;
          case 14: return CONGESTION_WARNING_AHEAD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MsgType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
              public MsgType findValueByNumber(int number) {
                return MsgType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return NationalStandardOuterClass.NationalStandard.getDescriptor().getEnumTypes().get(0);
      }

      private static final MsgType[] VALUES = values();

      public static MsgType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MsgType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:NationalStandard.MsgType)
    }

    private int bitField0_;
    private int messageCase_ = 0;
    private Object message_;
    public enum MessageCase
        implements com.google.protobuf.Internal.EnumLite {
      GUIDEPOST(2),
      GREENWAVEGUIDE(3),
      METADATAS(4),
      MESSAGE_NOT_SET(0);
      private final int value;
      private MessageCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static MessageCase valueOf(int value) {
        return forNumber(value);
      }

      public static MessageCase forNumber(int value) {
        switch (value) {
          case 2: return GUIDEPOST;
          case 3: return GREENWAVEGUIDE;
          case 4: return METADATAS;
          case 0: return MESSAGE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public MessageCase
    getMessageCase() {
      return MessageCase.forNumber(
          messageCase_);
    }

    public static final int MSGTYPE_FIELD_NUMBER = 1;
    private int msgType_;
    /**
     * <pre>
     * 消息编号,对应国标下的多种场景进行编号
     * </pre>
     *
     * <code>.NationalStandard.MsgType msgType = 1;</code>
     */
    public int getMsgTypeValue() {
      return msgType_;
    }
    /**
     * <pre>
     * 消息编号,对应国标下的多种场景进行编号
     * </pre>
     *
     * <code>.NationalStandard.MsgType msgType = 1;</code>
     */
    public NationalStandardOuterClass.NationalStandard.MsgType getMsgType() {
      NationalStandardOuterClass.NationalStandard.MsgType result = NationalStandardOuterClass.NationalStandard.MsgType.valueOf(msgType_);
      return result == null ? NationalStandardOuterClass.NationalStandard.MsgType.UNRECOGNIZED : result;
    }

    public static final int GUIDEPOST_FIELD_NUMBER = 2;
    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    public boolean hasGuidepost() {
      return messageCase_ == 2;
    }
    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    public GuidepostOuterClass.Guidepost getGuidepost() {
      if (messageCase_ == 2) {
         return (GuidepostOuterClass.Guidepost) message_;
      }
      return GuidepostOuterClass.Guidepost.getDefaultInstance();
    }
    /**
     * <pre>
     * 路牌提示消息,可选
     * </pre>
     *
     * <code>.Guidepost guidepost = 2;</code>
     */
    public GuidepostOuterClass.GuidepostOrBuilder getGuidepostOrBuilder() {
      if (messageCase_ == 2) {
         return (GuidepostOuterClass.Guidepost) message_;
      }
      return GuidepostOuterClass.Guidepost.getDefaultInstance();
    }

    public static final int GREENWAVEGUIDE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    public boolean hasGreenWaveGuide() {
      return messageCase_ == 3;
    }
    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    public GreenWaveGuideOuterClass.GreenWaveGuideList getGreenWaveGuide() {
      if (messageCase_ == 3) {
         return (GreenWaveGuideOuterClass.GreenWaveGuideList) message_;
      }
      return GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
    }
    /**
     * <pre>
     * 绿波引导,一个路口可能上报多个红绿灯的
     * </pre>
     *
     * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
     */
    public GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder getGreenWaveGuideOrBuilder() {
      if (messageCase_ == 3) {
         return (GreenWaveGuideOuterClass.GreenWaveGuideList) message_;
      }
      return GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
    }

    public static final int METADATAS_FIELD_NUMBER = 4;
    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    public boolean hasMetadatas() {
      return messageCase_ == 4;
    }
    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    public MetadataOuterClass.MetadataList getMetadatas() {
      if (messageCase_ == 4) {
         return (MetadataOuterClass.MetadataList) message_;
      }
      return MetadataOuterClass.MetadataList.getDefaultInstance();
    }
    /**
     * <pre>
     * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
     * </pre>
     *
     * <code>.MetadataList metadatas = 4;</code>
     */
    public MetadataOuterClass.MetadataListOrBuilder getMetadatasOrBuilder() {
      if (messageCase_ == 4) {
         return (MetadataOuterClass.MetadataList) message_;
      }
      return MetadataOuterClass.MetadataList.getDefaultInstance();
    }

    public static final int EXTRA_FIELD_NUMBER = 5;
    private java.util.List<ExtraOuterClass.Extra> extra_;
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    public java.util.List<ExtraOuterClass.Extra> getExtraList() {
      return extra_;
    }
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    public java.util.List<? extends ExtraOuterClass.ExtraOrBuilder>
        getExtraOrBuilderList() {
      return extra_;
    }
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    public int getExtraCount() {
      return extra_.size();
    }
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    public ExtraOuterClass.Extra getExtra(int index) {
      return extra_.get(index);
    }
    /**
     * <pre>
     * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
     * false 表示离开路口
     * </pre>
     *
     * <code>repeated .Extra extra = 5;</code>
     */
    public ExtraOuterClass.ExtraOrBuilder getExtraOrBuilder(
        int index) {
      return extra_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (msgType_ != NationalStandardOuterClass.NationalStandard.MsgType.GUIDEPOST.getNumber()) {
        output.writeEnum(1, msgType_);
      }
      if (messageCase_ == 2) {
        output.writeMessage(2, (GuidepostOuterClass.Guidepost) message_);
      }
      if (messageCase_ == 3) {
        output.writeMessage(3, (GreenWaveGuideOuterClass.GreenWaveGuideList) message_);
      }
      if (messageCase_ == 4) {
        output.writeMessage(4, (MetadataOuterClass.MetadataList) message_);
      }
      for (int i = 0; i < extra_.size(); i++) {
        output.writeMessage(5, extra_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (msgType_ != NationalStandardOuterClass.NationalStandard.MsgType.GUIDEPOST.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, msgType_);
      }
      if (messageCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (GuidepostOuterClass.Guidepost) message_);
      }
      if (messageCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (GreenWaveGuideOuterClass.GreenWaveGuideList) message_);
      }
      if (messageCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (MetadataOuterClass.MetadataList) message_);
      }
      for (int i = 0; i < extra_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, extra_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof NationalStandardOuterClass.NationalStandard)) {
        return super.equals(obj);
      }
      NationalStandardOuterClass.NationalStandard other = (NationalStandardOuterClass.NationalStandard) obj;

      boolean result = true;
      result = result && msgType_ == other.msgType_;
      result = result && getExtraList()
          .equals(other.getExtraList());
      result = result && getMessageCase().equals(
          other.getMessageCase());
      if (!result) return false;
      switch (messageCase_) {
        case 2:
          result = result && getGuidepost()
              .equals(other.getGuidepost());
          break;
        case 3:
          result = result && getGreenWaveGuide()
              .equals(other.getGreenWaveGuide());
          break;
        case 4:
          result = result && getMetadatas()
              .equals(other.getMetadatas());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MSGTYPE_FIELD_NUMBER;
      hash = (53 * hash) + msgType_;
      if (getExtraCount() > 0) {
        hash = (37 * hash) + EXTRA_FIELD_NUMBER;
        hash = (53 * hash) + getExtraList().hashCode();
      }
      switch (messageCase_) {
        case 2:
          hash = (37 * hash) + GUIDEPOST_FIELD_NUMBER;
          hash = (53 * hash) + getGuidepost().hashCode();
          break;
        case 3:
          hash = (37 * hash) + GREENWAVEGUIDE_FIELD_NUMBER;
          hash = (53 * hash) + getGreenWaveGuide().hashCode();
          break;
        case 4:
          hash = (37 * hash) + METADATAS_FIELD_NUMBER;
          hash = (53 * hash) + getMetadatas().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static NationalStandardOuterClass.NationalStandard parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static NationalStandardOuterClass.NationalStandard parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static NationalStandardOuterClass.NationalStandard parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static NationalStandardOuterClass.NationalStandard parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(NationalStandardOuterClass.NationalStandard prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code NationalStandard}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:NationalStandard)
        NationalStandardOuterClass.NationalStandardOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return NationalStandardOuterClass.internal_static_NationalStandard_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return NationalStandardOuterClass.internal_static_NationalStandard_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                NationalStandardOuterClass.NationalStandard.class, NationalStandardOuterClass.NationalStandard.Builder.class);
      }

      // Construct using NationalStandardOuterClass.NationalStandard.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExtraFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        msgType_ = 0;

        if (extraBuilder_ == null) {
          extra_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          extraBuilder_.clear();
        }
        messageCase_ = 0;
        message_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return NationalStandardOuterClass.internal_static_NationalStandard_descriptor;
      }

      public NationalStandardOuterClass.NationalStandard getDefaultInstanceForType() {
        return NationalStandardOuterClass.NationalStandard.getDefaultInstance();
      }

      public NationalStandardOuterClass.NationalStandard build() {
        NationalStandardOuterClass.NationalStandard result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public NationalStandardOuterClass.NationalStandard buildPartial() {
        NationalStandardOuterClass.NationalStandard result = new NationalStandardOuterClass.NationalStandard(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.msgType_ = msgType_;
        if (messageCase_ == 2) {
          if (guidepostBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = guidepostBuilder_.build();
          }
        }
        if (messageCase_ == 3) {
          if (greenWaveGuideBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = greenWaveGuideBuilder_.build();
          }
        }
        if (messageCase_ == 4) {
          if (metadatasBuilder_ == null) {
            result.message_ = message_;
          } else {
            result.message_ = metadatasBuilder_.build();
          }
        }
        if (extraBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010)) {
            extra_ = java.util.Collections.unmodifiableList(extra_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.extra_ = extra_;
        } else {
          result.extra_ = extraBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.messageCase_ = messageCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof NationalStandardOuterClass.NationalStandard) {
          return mergeFrom((NationalStandardOuterClass.NationalStandard)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(NationalStandardOuterClass.NationalStandard other) {
        if (other == NationalStandardOuterClass.NationalStandard.getDefaultInstance()) return this;
        if (other.msgType_ != 0) {
          setMsgTypeValue(other.getMsgTypeValue());
        }
        if (extraBuilder_ == null) {
          if (!other.extra_.isEmpty()) {
            if (extra_.isEmpty()) {
              extra_ = other.extra_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureExtraIsMutable();
              extra_.addAll(other.extra_);
            }
            onChanged();
          }
        } else {
          if (!other.extra_.isEmpty()) {
            if (extraBuilder_.isEmpty()) {
              extraBuilder_.dispose();
              extraBuilder_ = null;
              extra_ = other.extra_;
              bitField0_ = (bitField0_ & ~0x00000010);
              extraBuilder_ =
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExtraFieldBuilder() : null;
            } else {
              extraBuilder_.addAllMessages(other.extra_);
            }
          }
        }
        switch (other.getMessageCase()) {
          case GUIDEPOST: {
            mergeGuidepost(other.getGuidepost());
            break;
          }
          case GREENWAVEGUIDE: {
            mergeGreenWaveGuide(other.getGreenWaveGuide());
            break;
          }
          case METADATAS: {
            mergeMetadatas(other.getMetadatas());
            break;
          }
          case MESSAGE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        NationalStandardOuterClass.NationalStandard parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (NationalStandardOuterClass.NationalStandard) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int messageCase_ = 0;
      private Object message_;
      public MessageCase
          getMessageCase() {
        return MessageCase.forNumber(
            messageCase_);
      }

      public Builder clearMessage() {
        messageCase_ = 0;
        message_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int msgType_ = 0;
      /**
       * <pre>
       * 消息编号,对应国标下的多种场景进行编号
       * </pre>
       *
       * <code>.NationalStandard.MsgType msgType = 1;</code>
       */
      public int getMsgTypeValue() {
        return msgType_;
      }
      /**
       * <pre>
       * 消息编号,对应国标下的多种场景进行编号
       * </pre>
       *
       * <code>.NationalStandard.MsgType msgType = 1;</code>
       */
      public Builder setMsgTypeValue(int value) {
        msgType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 消息编号,对应国标下的多种场景进行编号
       * </pre>
       *
       * <code>.NationalStandard.MsgType msgType = 1;</code>
       */
      public NationalStandardOuterClass.NationalStandard.MsgType getMsgType() {
        NationalStandardOuterClass.NationalStandard.MsgType result = NationalStandardOuterClass.NationalStandard.MsgType.valueOf(msgType_);
        return result == null ? NationalStandardOuterClass.NationalStandard.MsgType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * 消息编号,对应国标下的多种场景进行编号
       * </pre>
       *
       * <code>.NationalStandard.MsgType msgType = 1;</code>
       */
      public Builder setMsgType(NationalStandardOuterClass.NationalStandard.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }

        msgType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 消息编号,对应国标下的多种场景进行编号
       * </pre>
       *
       * <code>.NationalStandard.MsgType msgType = 1;</code>
       */
      public Builder clearMsgType() {

        msgType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          GuidepostOuterClass.Guidepost, GuidepostOuterClass.Guidepost.Builder, GuidepostOuterClass.GuidepostOrBuilder> guidepostBuilder_;
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public boolean hasGuidepost() {
        return messageCase_ == 2;
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public GuidepostOuterClass.Guidepost getGuidepost() {
        if (guidepostBuilder_ == null) {
          if (messageCase_ == 2) {
            return (GuidepostOuterClass.Guidepost) message_;
          }
          return GuidepostOuterClass.Guidepost.getDefaultInstance();
        } else {
          if (messageCase_ == 2) {
            return guidepostBuilder_.getMessage();
          }
          return GuidepostOuterClass.Guidepost.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public Builder setGuidepost(GuidepostOuterClass.Guidepost value) {
        if (guidepostBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          guidepostBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public Builder setGuidepost(
          GuidepostOuterClass.Guidepost.Builder builderForValue) {
        if (guidepostBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          guidepostBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public Builder mergeGuidepost(GuidepostOuterClass.Guidepost value) {
        if (guidepostBuilder_ == null) {
          if (messageCase_ == 2 &&
              message_ != GuidepostOuterClass.Guidepost.getDefaultInstance()) {
            message_ = GuidepostOuterClass.Guidepost.newBuilder((GuidepostOuterClass.Guidepost) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 2) {
            guidepostBuilder_.mergeFrom(value);
          }
          guidepostBuilder_.setMessage(value);
        }
        messageCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public Builder clearGuidepost() {
        if (guidepostBuilder_ == null) {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 2) {
            messageCase_ = 0;
            message_ = null;
          }
          guidepostBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public GuidepostOuterClass.Guidepost.Builder getGuidepostBuilder() {
        return getGuidepostFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      public GuidepostOuterClass.GuidepostOrBuilder getGuidepostOrBuilder() {
        if ((messageCase_ == 2) && (guidepostBuilder_ != null)) {
          return guidepostBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 2) {
            return (GuidepostOuterClass.Guidepost) message_;
          }
          return GuidepostOuterClass.Guidepost.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 路牌提示消息,可选
       * </pre>
       *
       * <code>.Guidepost guidepost = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          GuidepostOuterClass.Guidepost, GuidepostOuterClass.Guidepost.Builder, GuidepostOuterClass.GuidepostOrBuilder>
          getGuidepostFieldBuilder() {
        if (guidepostBuilder_ == null) {
          if (!(messageCase_ == 2)) {
            message_ = GuidepostOuterClass.Guidepost.getDefaultInstance();
          }
          guidepostBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              GuidepostOuterClass.Guidepost, GuidepostOuterClass.Guidepost.Builder, GuidepostOuterClass.GuidepostOrBuilder>(
                  (GuidepostOuterClass.Guidepost) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 2;
        onChanged();;
        return guidepostBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          GreenWaveGuideOuterClass.GreenWaveGuideList, GreenWaveGuideOuterClass.GreenWaveGuideList.Builder, GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder> greenWaveGuideBuilder_;
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public boolean hasGreenWaveGuide() {
        return messageCase_ == 3;
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public GreenWaveGuideOuterClass.GreenWaveGuideList getGreenWaveGuide() {
        if (greenWaveGuideBuilder_ == null) {
          if (messageCase_ == 3) {
            return (GreenWaveGuideOuterClass.GreenWaveGuideList) message_;
          }
          return GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
        } else {
          if (messageCase_ == 3) {
            return greenWaveGuideBuilder_.getMessage();
          }
          return GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public Builder setGreenWaveGuide(GreenWaveGuideOuterClass.GreenWaveGuideList value) {
        if (greenWaveGuideBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          greenWaveGuideBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public Builder setGreenWaveGuide(
          GreenWaveGuideOuterClass.GreenWaveGuideList.Builder builderForValue) {
        if (greenWaveGuideBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          greenWaveGuideBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public Builder mergeGreenWaveGuide(GreenWaveGuideOuterClass.GreenWaveGuideList value) {
        if (greenWaveGuideBuilder_ == null) {
          if (messageCase_ == 3 &&
              message_ != GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance()) {
            message_ = GreenWaveGuideOuterClass.GreenWaveGuideList.newBuilder((GreenWaveGuideOuterClass.GreenWaveGuideList) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 3) {
            greenWaveGuideBuilder_.mergeFrom(value);
          }
          greenWaveGuideBuilder_.setMessage(value);
        }
        messageCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public Builder clearGreenWaveGuide() {
        if (greenWaveGuideBuilder_ == null) {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 3) {
            messageCase_ = 0;
            message_ = null;
          }
          greenWaveGuideBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public GreenWaveGuideOuterClass.GreenWaveGuideList.Builder getGreenWaveGuideBuilder() {
        return getGreenWaveGuideFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      public GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder getGreenWaveGuideOrBuilder() {
        if ((messageCase_ == 3) && (greenWaveGuideBuilder_ != null)) {
          return greenWaveGuideBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 3) {
            return (GreenWaveGuideOuterClass.GreenWaveGuideList) message_;
          }
          return GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 绿波引导,一个路口可能上报多个红绿灯的
       * </pre>
       *
       * <code>.GreenWaveGuideList greenWaveGuide = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          GreenWaveGuideOuterClass.GreenWaveGuideList, GreenWaveGuideOuterClass.GreenWaveGuideList.Builder, GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder>
          getGreenWaveGuideFieldBuilder() {
        if (greenWaveGuideBuilder_ == null) {
          if (!(messageCase_ == 3)) {
            message_ = GreenWaveGuideOuterClass.GreenWaveGuideList.getDefaultInstance();
          }
          greenWaveGuideBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              GreenWaveGuideOuterClass.GreenWaveGuideList, GreenWaveGuideOuterClass.GreenWaveGuideList.Builder, GreenWaveGuideOuterClass.GreenWaveGuideListOrBuilder>(
                  (GreenWaveGuideOuterClass.GreenWaveGuideList) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 3;
        onChanged();;
        return greenWaveGuideBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          MetadataOuterClass.MetadataList, MetadataOuterClass.MetadataList.Builder, MetadataOuterClass.MetadataListOrBuilder> metadatasBuilder_;
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public boolean hasMetadatas() {
        return messageCase_ == 4;
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public MetadataOuterClass.MetadataList getMetadatas() {
        if (metadatasBuilder_ == null) {
          if (messageCase_ == 4) {
            return (MetadataOuterClass.MetadataList) message_;
          }
          return MetadataOuterClass.MetadataList.getDefaultInstance();
        } else {
          if (messageCase_ == 4) {
            return metadatasBuilder_.getMessage();
          }
          return MetadataOuterClass.MetadataList.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public Builder setMetadatas(MetadataOuterClass.MetadataList value) {
        if (metadatasBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          message_ = value;
          onChanged();
        } else {
          metadatasBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public Builder setMetadatas(
          MetadataOuterClass.MetadataList.Builder builderForValue) {
        if (metadatasBuilder_ == null) {
          message_ = builderForValue.build();
          onChanged();
        } else {
          metadatasBuilder_.setMessage(builderForValue.build());
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public Builder mergeMetadatas(MetadataOuterClass.MetadataList value) {
        if (metadatasBuilder_ == null) {
          if (messageCase_ == 4 &&
              message_ != MetadataOuterClass.MetadataList.getDefaultInstance()) {
            message_ = MetadataOuterClass.MetadataList.newBuilder((MetadataOuterClass.MetadataList) message_)
                .mergeFrom(value).buildPartial();
          } else {
            message_ = value;
          }
          onChanged();
        } else {
          if (messageCase_ == 4) {
            metadatasBuilder_.mergeFrom(value);
          }
          metadatasBuilder_.setMessage(value);
        }
        messageCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public Builder clearMetadatas() {
        if (metadatasBuilder_ == null) {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
            onChanged();
          }
        } else {
          if (messageCase_ == 4) {
            messageCase_ = 0;
            message_ = null;
          }
          metadatasBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public MetadataOuterClass.MetadataList.Builder getMetadatasBuilder() {
        return getMetadatasFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      public MetadataOuterClass.MetadataListOrBuilder getMetadatasOrBuilder() {
        if ((messageCase_ == 4) && (metadatasBuilder_ != null)) {
          return metadatasBuilder_.getMessageOrBuilder();
        } else {
          if (messageCase_ == 4) {
            return (MetadataOuterClass.MetadataList) message_;
          }
          return MetadataOuterClass.MetadataList.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * 国标场景中，交通参与者信息，此字段携带的信息规划中，当前版本未开发
       * </pre>
       *
       * <code>.MetadataList metadatas = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          MetadataOuterClass.MetadataList, MetadataOuterClass.MetadataList.Builder, MetadataOuterClass.MetadataListOrBuilder>
          getMetadatasFieldBuilder() {
        if (metadatasBuilder_ == null) {
          if (!(messageCase_ == 4)) {
            message_ = MetadataOuterClass.MetadataList.getDefaultInstance();
          }
          metadatasBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              MetadataOuterClass.MetadataList, MetadataOuterClass.MetadataList.Builder, MetadataOuterClass.MetadataListOrBuilder>(
                  (MetadataOuterClass.MetadataList) message_,
                  getParentForChildren(),
                  isClean());
          message_ = null;
        }
        messageCase_ = 4;
        onChanged();;
        return metadatasBuilder_;
      }

      private java.util.List<ExtraOuterClass.Extra> extra_ =
        java.util.Collections.emptyList();
      private void ensureExtraIsMutable() {
        if (!((bitField0_ & 0x00000010) == 0x00000010)) {
          extra_ = new java.util.ArrayList<ExtraOuterClass.Extra>(extra_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          ExtraOuterClass.Extra, ExtraOuterClass.Extra.Builder, ExtraOuterClass.ExtraOrBuilder> extraBuilder_;

      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public java.util.List<ExtraOuterClass.Extra> getExtraList() {
        if (extraBuilder_ == null) {
          return java.util.Collections.unmodifiableList(extra_);
        } else {
          return extraBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public int getExtraCount() {
        if (extraBuilder_ == null) {
          return extra_.size();
        } else {
          return extraBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public ExtraOuterClass.Extra getExtra(int index) {
        if (extraBuilder_ == null) {
          return extra_.get(index);
        } else {
          return extraBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder setExtra(
          int index, ExtraOuterClass.Extra value) {
        if (extraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtraIsMutable();
          extra_.set(index, value);
          onChanged();
        } else {
          extraBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder setExtra(
          int index, ExtraOuterClass.Extra.Builder builderForValue) {
        if (extraBuilder_ == null) {
          ensureExtraIsMutable();
          extra_.set(index, builderForValue.build());
          onChanged();
        } else {
          extraBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder addExtra(ExtraOuterClass.Extra value) {
        if (extraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtraIsMutable();
          extra_.add(value);
          onChanged();
        } else {
          extraBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder addExtra(
          int index, ExtraOuterClass.Extra value) {
        if (extraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExtraIsMutable();
          extra_.add(index, value);
          onChanged();
        } else {
          extraBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder addExtra(
          ExtraOuterClass.Extra.Builder builderForValue) {
        if (extraBuilder_ == null) {
          ensureExtraIsMutable();
          extra_.add(builderForValue.build());
          onChanged();
        } else {
          extraBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder addExtra(
          int index, ExtraOuterClass.Extra.Builder builderForValue) {
        if (extraBuilder_ == null) {
          ensureExtraIsMutable();
          extra_.add(index, builderForValue.build());
          onChanged();
        } else {
          extraBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder addAllExtra(
          Iterable<? extends ExtraOuterClass.Extra> values) {
        if (extraBuilder_ == null) {
          ensureExtraIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, extra_);
          onChanged();
        } else {
          extraBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder clearExtra() {
        if (extraBuilder_ == null) {
          extra_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          extraBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public Builder removeExtra(int index) {
        if (extraBuilder_ == null) {
          ensureExtraIsMutable();
          extra_.remove(index);
          onChanged();
        } else {
          extraBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public ExtraOuterClass.Extra.Builder getExtraBuilder(
          int index) {
        return getExtraFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public ExtraOuterClass.ExtraOrBuilder getExtraOrBuilder(
          int index) {
        if (extraBuilder_ == null) {
          return extra_.get(index);  } else {
          return extraBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public java.util.List<? extends ExtraOuterClass.ExtraOrBuilder>
           getExtraOrBuilderList() {
        if (extraBuilder_ != null) {
          return extraBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(extra_);
        }
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public ExtraOuterClass.Extra.Builder addExtraBuilder() {
        return getExtraFieldBuilder().addBuilder(
            ExtraOuterClass.Extra.getDefaultInstance());
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public ExtraOuterClass.Extra.Builder addExtraBuilder(
          int index) {
        return getExtraFieldBuilder().addBuilder(
            index, ExtraOuterClass.Extra.getDefaultInstance());
      }
      /**
       * <pre>
       * 如果收到的是绿波消息，可以从该字段获取车辆进入路口和离开路口的信号,key是"intheIntersection",true表示进入路口
       * false 表示离开路口
       * </pre>
       *
       * <code>repeated .Extra extra = 5;</code>
       */
      public java.util.List<ExtraOuterClass.Extra.Builder>
           getExtraBuilderList() {
        return getExtraFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          ExtraOuterClass.Extra, ExtraOuterClass.Extra.Builder, ExtraOuterClass.ExtraOrBuilder>
          getExtraFieldBuilder() {
        if (extraBuilder_ == null) {
          extraBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              ExtraOuterClass.Extra, ExtraOuterClass.Extra.Builder, ExtraOuterClass.ExtraOrBuilder>(
                  extra_,
                  ((bitField0_ & 0x00000010) == 0x00000010),
                  getParentForChildren(),
                  isClean());
          extra_ = null;
        }
        return extraBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:NationalStandard)
    }

    // @@protoc_insertion_point(class_scope:NationalStandard)
    private static final NationalStandardOuterClass.NationalStandard DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new NationalStandardOuterClass.NationalStandard();
    }

    public static NationalStandardOuterClass.NationalStandard getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NationalStandard>
        PARSER = new com.google.protobuf.AbstractParser<NationalStandard>() {
      public NationalStandard parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new NationalStandard(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NationalStandard> parser() {
      return PARSER;
    }

    @Override
    public com.google.protobuf.Parser<NationalStandard> getParserForType() {
      return PARSER;
    }

    public NationalStandardOuterClass.NationalStandard getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_NationalStandard_descriptor;
  private static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_NationalStandard_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\026NationalStandard.proto\032\017Guidepost.prot" +
      "o\032\024GreenWaveGuide.proto\032\013Extra.proto\032\016Me" +
      "tadata.proto\"\200\005\n\020NationalStandard\022*\n\007msg" +
      "Type\030\001 \001(\0162\031.NationalStandard.MsgType\022\037\n" +
      "\tguidepost\030\002 \001(\0132\n.GuidepostH\000\022-\n\016greenW" +
      "aveGuide\030\003 \001(\0132\023.GreenWaveGuideListH\000\022\"\n" +
      "\tmetadatas\030\004 \001(\0132\r.MetadataListH\000\022\025\n\005ext" +
      "ra\030\005 \003(\0132\006.Extra\"\251\003\n\007MsgType\022\r\n\tGUIDEPOS" +
      "T\020\000\022\024\n\020GREEN_WAVE_GUIDE\020\001\022\036\n\032EMERGENCY_V" +
      "EHICLE_REMINDER\020\002\022\027\n\023LANE_CHANGE_WARNING",
      "\020\003\022\035\n\031FORWARD_COLLISION_WARNING\020\004\022\030\n\024INT" +
      "ERSECTION_WARNING\020\005\022\027\n\023TURN_LEFT_AUXILIA" +
      "RY\020\006\022\016\n\nBLIND_SPOT\020\007\022\036\n\032REVERSE_OVERTAKI" +
      "NG_WARNING\020\010\022\033\n\027EMERGENCY_BRAKE_WARNING\020" +
      "\t\022\034\n\030ABNORMAL_VEHICLE_WARNING\020\n\022\030\n\024VEHIC" +
      "LE_LOSS_WARNING\020\013\022\025\n\021RED_LIGHT_WARNING\020\014" +
      "\0224\n0VULNERABLE_TRAFFIC_PARTICIPANT_COLLI" +
      "SION_WARNING\020\r\022\034\n\030CONGESTION_WARNING_AHE" +
      "AD\020\016B\t\n\007messageb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          GuidepostOuterClass.getDescriptor(),
          GreenWaveGuideOuterClass.getDescriptor(),
          ExtraOuterClass.getDescriptor(),
          MetadataOuterClass.getDescriptor(),
        }, assigner);
    internal_static_NationalStandard_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_NationalStandard_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_NationalStandard_descriptor,
        new String[] { "MsgType", "Guidepost", "GreenWaveGuide", "Metadatas", "Extra", "Message", });
    GuidepostOuterClass.getDescriptor();
    GreenWaveGuideOuterClass.getDescriptor();
    ExtraOuterClass.getDescriptor();
    MetadataOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
